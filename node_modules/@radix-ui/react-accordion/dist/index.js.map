{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/accordion/src/Accordion.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider scope={__scopeAccordion} disabled={disabled}>\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","$parcel$interopDefault","a","__esModule","default","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createCollection","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","_react","createElement","$cb9b5aef7d7fb550d41028d1634396$var$Collection","Provider","scope","__scopeAccordion","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplMultiple","_babelRuntimeHelpersExtends","ref","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplSingle","propTypes","value","defaultValue","includes","Error","Array","isArray","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","valueProp","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$cb9b5aef7d7fb550d41028d1634396$var$AccordionValueProvider","onItemOpen","onItemClose","useCallback","$cb9b5aef7d7fb550d41028d1634396$var$AccordionCollapsibleProvider","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","accordionRef","useRef","composedRefs","useComposedRefs","getItems","handleKeyDown","composeEventHandlers","onKeyDown","event","_triggerCollection$cl","target","triggerCollection","item","_item$ref$current","current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","focus","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplProvider","Slot","Primitive","div","undefined","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$cb9b5aef7d7fb550d41028d1634396$var$AccordionItemProvider","_radixUiReactCollapsible","Root","onOpenChange","AccordionHeader","headerProps","itemContext","h3","AccordionTrigger","triggerProps","collapsibleContext","ItemSlot","Trigger","id","AccordionContent","contentProps","Content","role","style","Item","Header"],"version":3,"file":"index.js.map"}