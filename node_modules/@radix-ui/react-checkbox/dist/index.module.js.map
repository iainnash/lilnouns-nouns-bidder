{"mappings":"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","sources":["./packages/react/checkbox/src/Checkbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { useLabelContext } from '@radix-ui/react-label';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      'aria-labelledby': ariaLabelledby,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const labelId = useLabelContext(button);\n    const labelledBy = ariaLabelledby || labelId;\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-labelledby={labelledBy}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={isIndeterminate(checked) ? false : checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps };\n"],"names":["createCheckboxContext","createCheckboxScope","createContextScope","CheckboxProvider","useCheckboxContext","Checkbox","React","forwardRef","props","forwardedRef","__scopeCheckbox","ariaLabelledby","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","checkboxProps","button","setButton","useState","composedRefs","useComposedRefs","node","labelId","useLabelContext","labelledBy","hasConsumerStoppedPropagationRef","useRef","isFormControl","Boolean","closest","setChecked","useControllableState","prop","defaultProp","onChange","_react","createElement","$f07a3f5319a7ee6a4f4bbe0b3d490ca$var$CheckboxProvider","scope","state","Primitive","_babelRuntimeHelpersEsmExtends","type","role","isIndeterminate","getState","undefined","ref","onKeyDown","composeEventHandlers","event","key","preventDefault","onClick","prevChecked","current","isPropagationStopped","stopPropagation","$f07a3f5319a7ee6a4f4bbe0b3d490ca$var$BubbleInput","control","bubbles","style","transform","CheckboxIndicator","forceMount","indicatorProps","context","Presence","present","span","pointerEvents","BubbleInput","inputProps","usePrevious","controlSize","useSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","tabIndex","position","opacity","margin","Root","Indicator"],"version":3,"file":"index.module.js.map"}