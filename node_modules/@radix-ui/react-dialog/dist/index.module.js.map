{"mappings":"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","sources":["./packages/react/dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { UnstablePortal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n  allowPinchZoom: DialogProps['allowPinchZoom'];\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ntype RemoveScrollProps = React.ComponentProps<typeof RemoveScroll>;\ninterface DialogProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n  /**\n   * @see https://github.com/theKashey/react-remove-scroll#usage\n   */\n  allowPinchZoom?: RemoveScrollProps['allowPinchZoom'];\n  children?: React.ReactNode;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n    allowPinchZoom,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n      allowPinchZoom={allowPinchZoom}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof UnstablePortal>;\ninterface DialogPortalProps extends Omit<PortalProps, 'asChild'> {\n  children?: React.ReactNode;\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <UnstablePortal asChild container={container}>\n            {child}\n          </UnstablePortal>\n        </Presence>\n      ))}\n    </>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const { forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom={context.allowPinchZoom} shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) hasInteractedOutsideRef.current = true;\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          //\n          // We use `onInteractOutside` as some browsers also\n          // focus on pointer down, creating the same issue.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning contentRef={contentRef} />\n            <DescriptionWarning contentRef={contentRef} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype WarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n};\n\nconst TitleWarning: React.FC<WarningProps> = ({ contentRef }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    const hasLabel =\n      contentRef.current?.getAttribute('aria-label') ||\n      document.getElementById(contentRef.current?.getAttribute('aria-labelledby')!);\n\n    if (!hasLabel) throw new Error(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\nconst DescriptionWarning: React.FC<WarningProps> = ({ contentRef }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    if (describedById) {\n      const hasDescription = document.getElementById(describedById);\n      if (describedById && !hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],"names":["createDialogContext","createDialogScope","createContextScope","DialogProvider","useDialogContext","Dialog","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","allowPinchZoom","triggerRef","React","useRef","contentRef","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","$da81f3af863821fb8a193d321c41d$var$DialogProvider","scope","contentId","useId","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","DialogTrigger","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","button","_babelRuntimeHelpersEsmExtends","type","getState","ref","onClick","composeEventHandlers","DialogPortal","forceMount","container","Fragment","Children","map","child","Presence","present","UnstablePortal","asChild","DialogOverlay","overlayProps","$da81f3af863821fb8a193d321c41d$var$DialogOverlayImpl","DialogOverlayImpl","RemoveScroll","as","Slot","shards","div","style","pointerEvents","DialogContent","contentProps","$da81f3af863821fb8a193d321c41d$var$DialogContentModal","$da81f3af863821fb8a193d321c41d$var$DialogContentNonModal","DialogContentModal","composedRefs","useEffect","content","current","hideOthers","$da81f3af863821fb8a193d321c41d$var$DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","_context$triggerRef$c","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","onFocusOutside","DialogContentNonModal","hasInteractedOutsideRef","_props$onCloseAutoFoc","_context$triggerRef$c2","call","defaultPrevented","onInteractOutside","_props$onInteractOuts","_context$triggerRef$c3","target","contains","DialogContentImpl","onOpenAutoFocus","useFocusGuards","FocusScope","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","role","id","onDismiss","DialogTitle","titleProps","h2","DialogDescription","descriptionProps","p","DialogClose","closeProps","WarningProvider","useWarningContext","createContext","contentName","titleName","docsSlug","Root","Trigger","Portal","Overlay","Content","Title","Description","Close"],"version":3,"file":"index.module.js.map"}