{"mappings":"kSAYA,MAGOA,EAAeC,GAAuBC,EAHhC,QAGuE,CAClFC,QAAIC,EACJC,WAAY,CAAEC,QAAS,eASzB,MAAMC,mBAAQC,EAAMC,YAAqC,CAACC,EAAOC,KAC/D,MAAMC,QAAEA,EAAST,GAAIU,KAAWC,GAAeJ,EACzCL,EAAaG,EAAMO,OAA2B,MAC9CC,EAAMR,EAAMO,OAAwB,MACpCE,EAAeC,EAAgBP,EAAcK,GAC7Cb,EAAKgB,EAAMN,GA2BjB,OAzBAL,EAAMY,WAAU,KACd,GAAIR,EAAS,CACX,MAAMS,EAAUC,SAASC,eAAeX,GAExC,GADcI,EAAIV,SACLe,EAAS,CACpB,MAAMG,EAAe,IAAMH,EAAQI,aAAa,mBAC1CC,EAAiB,CAACvB,EAAIqB,KAAgBG,OAAOC,SAASC,KAAK,KAGjE,OAFAR,EAAQS,aAAa,kBAAmBJ,GACxCrB,EAAWC,QAAUe,EACd,KAAM,IAAAU,EAKX,MAAML,EAAc,QAAAK,EAAGP,WAAH,IAAAO,OAAA,EAAGA,EAAgBC,QAAQ7B,EAAI,IAC5B,KAAnBuB,EACFL,EAAQY,gBAAgB,mBACfP,GACTL,EAAQS,aAAa,kBAAmBJ,QAK/C,CAACvB,EAAIS,iBAGNsB,EAAAC,cAACC,EAAD,CAAejC,GAAIA,EAAIE,WAAYA,gBACjC6B,EAAAC,cAACE,EAAUC,KAAXC,EAAA,CACEC,KAAK,QACLrC,GAAIA,GACAW,EAHN,CAIEE,IAAKC,EACLwB,YAAcC,IAAU,IAAAC,EACtB,QAAAA,EAAAjC,EAAM+B,mBAAN,IAAAE,GAAAA,EAAAC,KAAAlC,EAAoBgC,IAEfA,EAAMG,kBAAoBH,EAAMI,OAAS,GAAGJ,EAAMK,kBAEzDC,QAAUN,IAAU,IAAAO,EAElB,GADA,QAAAA,EAAAvC,EAAMsC,eAAN,IAAAC,GAAAA,EAAAL,KAAAlC,EAAgBgC,IACXrC,EAAWC,SAAWoC,EAAMG,iBAAkB,OACnD,MAAMK,EAAoB7C,EAAWC,QAAQ6C,SAAST,EAAMU,QAGtDC,GAAkC,IAApBX,EAAMY,WAMrBJ,GAAqBG,IACxBhD,EAAWC,QAAQiD,QACnBlD,EAAWC,QAAQkD,qCAY/B,MAAMC,gBAAmBpC,IACvB,MAAMqC,EAAUzD,EAAoB,kBAC9BI,WAAEA,GAAeqD,EAMvB,OAJAlD,EAAMY,WAAU,KACVC,IAAShB,EAAWC,QAAUe,KACjC,CAACA,EAAShB,IAENqD,EAAQvD,WAGjB,MAAMwD,KAAOpD","sources":["./packages/react/label/src/Label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContext } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelContextValue = { id?: string; controlRef: React.MutableRefObject<HTMLElement | null> };\nconst [LabelProvider, useLabelContextImpl] = createContext<LabelContextValue>(NAME, {\n  id: undefined,\n  controlRef: { current: null },\n});\n\ntype LabelElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface LabelProps extends PrimitiveSpanProps {\n  htmlFor?: string;\n}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  const { htmlFor, id: idProp, ...labelProps } = props;\n  const controlRef = React.useRef<HTMLElement | null>(null);\n  const ref = React.useRef<HTMLSpanElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const id = useId(idProp);\n\n  React.useEffect(() => {\n    if (htmlFor) {\n      const element = document.getElementById(htmlFor);\n      const label = ref.current;\n      if (label && element) {\n        const getAriaLabel = () => element.getAttribute('aria-labelledby');\n        const ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(' ');\n        element.setAttribute('aria-labelledby', ariaLabelledBy);\n        controlRef.current = element;\n        return () => {\n          /**\n           * We get the latest attribute value because at the time that this cleanup fires,\n           * the values from the closure may have changed.\n           */\n          const ariaLabelledBy = getAriaLabel()?.replace(id, '');\n          if (ariaLabelledBy === '') {\n            element.removeAttribute('aria-labelledby');\n          } else if (ariaLabelledBy) {\n            element.setAttribute('aria-labelledby', ariaLabelledBy);\n          }\n        };\n      }\n    }\n  }, [id, htmlFor]);\n\n  return (\n    <LabelProvider id={id} controlRef={controlRef}>\n      <Primitive.span\n        role=\"label\"\n        id={id}\n        {...labelProps}\n        ref={composedRefs}\n        onMouseDown={(event) => {\n          props.onMouseDown?.(event);\n          // prevent text selection when double clicking label\n          if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }}\n        onClick={(event) => {\n          props.onClick?.(event);\n          if (!controlRef.current || event.defaultPrevented) return;\n          const isClickingControl = controlRef.current.contains(event.target as Node);\n          // Ensure event was generated by a user action\n          // https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\n          const isUserClick = event.isTrusted === true;\n          /**\n           * When a label is wrapped around the control it labels, we trigger the appropriate events\n           * on the control when the label is clicked. We do nothing if the user is already clicking the\n           * control inside the label.\n           */\n          if (!isClickingControl && isUserClick) {\n            controlRef.current.click();\n            controlRef.current.focus();\n          }\n        }}\n      />\n    </LabelProvider>\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst useLabelContext = (element?: HTMLElement | null) => {\n  const context = useLabelContextImpl('LabelConsumer');\n  const { controlRef } = context;\n\n  React.useEffect(() => {\n    if (element) controlRef.current = element;\n  }, [element, controlRef]);\n\n  return context.id;\n};\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n  //\n  useLabelContext,\n};\nexport type { LabelProps };\n"],"names":["LabelProvider","useLabelContextImpl","createContext","id","undefined","controlRef","current","Label","React","forwardRef","props","forwardedRef","htmlFor","idProp","labelProps","useRef","ref","composedRefs","useComposedRefs","useId","useEffect","element","document","getElementById","getAriaLabel","getAttribute","ariaLabelledBy","filter","Boolean","join","setAttribute","_getAriaLabel","replace","removeAttribute","_react","createElement","$b835b8b6a05acdec720aee4b37e4b65c$var$LabelProvider","Primitive","span","_babelRuntimeHelpersEsmExtends","role","onMouseDown","event","_props$onMouseDown","call","defaultPrevented","detail","preventDefault","onClick","_props$onClick","isClickingControl","contains","target","isUserClick","isTrusted","click","focus","useLabelContext","context","Root"],"version":3,"file":"index.module.js.map"}