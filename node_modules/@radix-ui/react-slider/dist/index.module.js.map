{"mappings":"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","sources":["./packages/react/slider/src/Slider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-use-direction';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { createCollection } from '@radix-ui/react-collection';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst PAGE_KEYS = ['PageUp', 'PageDown'];\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\nconst BACK_KEYS: Record<Direction, string[]> = {\n  ltr: ['ArrowDown', 'Home', 'ArrowLeft', 'PageDown'],\n  rtl: ['ArrowDown', 'Home', 'ArrowRight', 'PageDown'],\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Slider\n * -----------------------------------------------------------------------------------------------*/\n\nconst SLIDER_NAME = 'Slider';\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<SliderThumbElement>(SLIDER_NAME);\n\ntype ScopedProps<P> = P & { __scopeSlider?: Scope };\nconst [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [\n  createCollectionScope,\n]);\n\ntype SliderContextValue = {\n  disabled?: boolean;\n  min: number;\n  max: number;\n  values: number[];\n  valueIndexToChangeRef: React.MutableRefObject<number>;\n  thumbs: Set<SliderThumbElement>;\n  orientation: SliderProps['orientation'];\n};\n\nconst [SliderProvider, useSliderContext] = createSliderContext<SliderContextValue>(SLIDER_NAME);\n\ntype SliderElement = SliderHorizontalElement | SliderVerticalElement;\ninterface SliderProps\n  extends Omit<\n    SliderHorizontalProps | SliderVerticalProps,\n    keyof SliderOrientationPrivateProps | 'defaultValue'\n  > {\n  name?: string;\n  disabled?: boolean;\n  orientation?: React.AriaAttributes['aria-orientation'];\n  dir?: Direction;\n  min?: number;\n  max?: number;\n  step?: number;\n  minStepsBetweenThumbs?: number;\n  value?: number[];\n  defaultValue?: number[];\n  onValueChange?(value: number[]): void;\n}\n\nconst Slider = React.forwardRef<SliderElement, SliderProps>(\n  (props: ScopedProps<SliderProps>, forwardedRef) => {\n    const {\n      name,\n      min = 0,\n      max = 100,\n      step = 1,\n      orientation = 'horizontal',\n      disabled = false,\n      minStepsBetweenThumbs = 0,\n      defaultValue = [min],\n      value,\n      onValueChange = () => {},\n      ...sliderProps\n    } = props;\n    const [slider, setSlider] = React.useState<HTMLSpanElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));\n    const thumbRefs = React.useRef<SliderContextValue['thumbs']>(new Set());\n    const valueIndexToChangeRef = React.useRef<number>(0);\n    const isHorizontal = orientation === 'horizontal';\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = slider ? Boolean(slider.closest('form')) : true;\n    const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;\n\n    const [values = [], setValues] = useControllableState({\n      prop: value,\n      defaultProp: defaultValue,\n      onChange: (value) => {\n        const thumbs = [...thumbRefs.current];\n        thumbs[valueIndexToChangeRef.current]?.focus();\n        onValueChange(value);\n      },\n    });\n\n    function handleSlideStart(value: number) {\n      const closestIndex = getClosestValueIndex(values, value);\n      updateValues(value, closestIndex);\n    }\n\n    function handleSlideMove(value: number) {\n      updateValues(value, valueIndexToChangeRef.current);\n    }\n\n    function updateValues(value: number, atIndex: number) {\n      const decimalCount = getDecimalCount(step);\n      const snapToStep = roundValue(Math.round((value - min) / step) * step + min, decimalCount);\n      const nextValue = clamp(snapToStep, [min, max]);\n\n      setValues((prevValues = []) => {\n        const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);\n        if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {\n          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);\n          return String(nextValues) === String(prevValues) ? prevValues : nextValues;\n        } else {\n          return prevValues;\n        }\n      });\n    }\n\n    return (\n      <SliderProvider\n        scope={props.__scopeSlider}\n        disabled={disabled}\n        min={min}\n        max={max}\n        valueIndexToChangeRef={valueIndexToChangeRef}\n        thumbs={thumbRefs.current}\n        values={values}\n        orientation={orientation}\n      >\n        <Collection.Provider scope={props.__scopeSlider}>\n          <Collection.Slot scope={props.__scopeSlider}>\n            <SliderOrientation\n              aria-disabled={disabled}\n              data-disabled={disabled ? '' : undefined}\n              {...sliderProps}\n              ref={composedRefs}\n              min={min}\n              max={max}\n              onSlideStart={disabled ? undefined : handleSlideStart}\n              onSlideMove={disabled ? undefined : handleSlideMove}\n              onHomeKeyDown={() => !disabled && updateValues(min, 0)}\n              onEndKeyDown={() => !disabled && updateValues(max, values.length - 1)}\n              onStepKeyDown={({ event, direction: stepDirection }) => {\n                if (!disabled) {\n                  const isPageKey = PAGE_KEYS.includes(event.key);\n                  const isSkipKey = isPageKey || (event.shiftKey && ARROW_KEYS.includes(event.key));\n                  const multiplier = isSkipKey ? 10 : 1;\n                  const atIndex = valueIndexToChangeRef.current;\n                  const value = values[atIndex];\n                  const stepInDirection = step * multiplier * stepDirection;\n                  updateValues(value + stepInDirection, atIndex);\n                }\n              }}\n            />\n          </Collection.Slot>\n        </Collection.Provider>\n        {isFormControl &&\n          values.map((value, index) => (\n            <BubbleInput\n              key={index}\n              name={name ? name + (values.length > 1 ? '[]' : '') : undefined}\n              value={value}\n            />\n          ))}\n      </SliderProvider>\n    );\n  }\n);\n\nSlider.displayName = SLIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderHorizontal\n * -----------------------------------------------------------------------------------------------*/\n\nconst [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext<{\n  startEdge: 'bottom' | 'left' | 'right';\n  endEdge: 'top' | 'right' | 'left';\n  size: keyof NonNullable<ReturnType<typeof useSize>>;\n  direction: number;\n}>(SLIDER_NAME, {\n  startEdge: 'left',\n  endEdge: 'right',\n  size: 'width',\n  direction: 1,\n});\n\ntype SliderOrientationPrivateProps = {\n  min: number;\n  max: number;\n  onSlideStart?(value: number): void;\n  onSlideMove?(value: number): void;\n  onHomeKeyDown(event: React.KeyboardEvent): void;\n  onEndKeyDown(event: React.KeyboardEvent): void;\n  onStepKeyDown(step: { event: React.KeyboardEvent; direction: number }): void;\n};\ninterface SliderOrientationProps\n  extends Omit<SliderImplProps, keyof SliderImplPrivateProps>,\n    SliderOrientationPrivateProps {}\n\ntype SliderHorizontalElement = SliderImplElement;\ninterface SliderHorizontalProps extends SliderOrientationProps {\n  dir?: Direction;\n}\n\nconst SliderHorizontal = React.forwardRef<SliderHorizontalElement, SliderHorizontalProps>(\n  (props: ScopedProps<SliderHorizontalProps>, forwardedRef) => {\n    const { min, max, dir, onSlideStart, onSlideMove, onStepKeyDown, ...sliderProps } = props;\n    const [slider, setSlider] = React.useState<SliderImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));\n    const rectRef = React.useRef<ClientRect>();\n    const direction = useDirection(slider, dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    function getValueFromPointer(pointerPosition: number) {\n      const rect = rectRef.current || slider!.getBoundingClientRect();\n      const input: [number, number] = [0, rect.width];\n      const output: [number, number] = isDirectionLTR ? [min, max] : [max, min];\n      const value = linearScale(input, output);\n\n      rectRef.current = rect;\n      return value(pointerPosition - rect.left);\n    }\n\n    return (\n      <SliderOrientationProvider\n        scope={props.__scopeSlider}\n        startEdge={isDirectionLTR ? 'left' : 'right'}\n        endEdge={isDirectionLTR ? 'right' : 'left'}\n        direction={isDirectionLTR ? 1 : -1}\n        size=\"width\"\n      >\n        <SliderImpl\n          data-orientation=\"horizontal\"\n          {...sliderProps}\n          ref={composedRefs}\n          style={{\n            ...sliderProps.style,\n            ['--radix-slider-thumb-transform' as any]: 'translateX(-50%)',\n          }}\n          onSlideStart={(event) => {\n            const value = getValueFromPointer(event.clientX);\n            onSlideStart?.(value);\n          }}\n          onSlideMove={(event) => {\n            const value = getValueFromPointer(event.clientX);\n            onSlideMove?.(value);\n          }}\n          onSlideEnd={() => (rectRef.current = undefined)}\n          onStepKeyDown={(event) => {\n            const isBackKey = BACK_KEYS[direction].includes(event.key);\n            onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });\n          }}\n        />\n      </SliderOrientationProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderVertical\n * -----------------------------------------------------------------------------------------------*/\n\ntype SliderVerticalElement = SliderImplElement;\ninterface SliderVerticalProps extends SliderOrientationProps {}\n\nconst SliderVertical = React.forwardRef<SliderVerticalElement, SliderVerticalProps>(\n  (props: ScopedProps<SliderVerticalProps>, forwardedRef) => {\n    const { min, max, onSlideStart, onSlideMove, onStepKeyDown, ...sliderProps } = props;\n    const sliderRef = React.useRef<SliderImplElement>(null);\n    const ref = useComposedRefs(forwardedRef, sliderRef);\n    const rectRef = React.useRef<ClientRect>();\n\n    function getValueFromPointer(pointerPosition: number) {\n      const rect = rectRef.current || sliderRef.current!.getBoundingClientRect();\n      const input: [number, number] = [0, rect.height];\n      const output: [number, number] = [max, min];\n      const value = linearScale(input, output);\n\n      rectRef.current = rect;\n      return value(pointerPosition - rect.top);\n    }\n\n    return (\n      <SliderOrientationProvider\n        scope={props.__scopeSlider}\n        startEdge=\"bottom\"\n        endEdge=\"top\"\n        size=\"height\"\n        direction={1}\n      >\n        <SliderImpl\n          data-orientation=\"vertical\"\n          {...sliderProps}\n          ref={ref}\n          style={{\n            ...sliderProps.style,\n            ['--radix-slider-thumb-transform' as any]: 'translateY(50%)',\n          }}\n          onSlideStart={(event) => {\n            const value = getValueFromPointer(event.clientY);\n            onSlideStart?.(value);\n          }}\n          onSlideMove={(event) => {\n            const value = getValueFromPointer(event.clientY);\n            onSlideMove?.(value);\n          }}\n          onSlideEnd={() => (rectRef.current = undefined)}\n          onStepKeyDown={(event) => {\n            const isBackKey = BACK_KEYS.ltr.includes(event.key);\n            onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });\n          }}\n        />\n      </SliderOrientationProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderImpl\n * -----------------------------------------------------------------------------------------------*/\n\ntype SliderImplElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ntype SliderImplPrivateProps = {\n  onSlideStart(event: React.PointerEvent): void;\n  onSlideMove(event: React.PointerEvent): void;\n  onSlideEnd(event: React.PointerEvent): void;\n  onHomeKeyDown(event: React.KeyboardEvent): void;\n  onEndKeyDown(event: React.KeyboardEvent): void;\n  onStepKeyDown(event: React.KeyboardEvent): void;\n};\ninterface SliderImplProps extends PrimitiveDivProps, SliderImplPrivateProps {}\n\nconst SliderImpl = React.forwardRef<SliderImplElement, SliderImplProps>(\n  (props: ScopedProps<SliderImplProps>, forwardedRef) => {\n    const {\n      __scopeSlider,\n      onSlideStart,\n      onSlideMove,\n      onSlideEnd,\n      onHomeKeyDown,\n      onEndKeyDown,\n      onStepKeyDown,\n      ...sliderProps\n    } = props;\n    const context = useSliderContext(SLIDER_NAME, __scopeSlider);\n\n    return (\n      <Primitive.span\n        {...sliderProps}\n        ref={forwardedRef}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          if (event.key === 'Home') {\n            onHomeKeyDown(event);\n            // Prevent scrolling to page start\n            event.preventDefault();\n          } else if (event.key === 'End') {\n            onEndKeyDown(event);\n            // Prevent scrolling to page end\n            event.preventDefault();\n          } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event.key)) {\n            onStepKeyDown(event);\n            // Prevent scrolling for directional key presses\n            event.preventDefault();\n          }\n        })}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const target = event.target as HTMLElement;\n          target.setPointerCapture(event.pointerId);\n          // Prevent browser focus behaviour because we focus a thumb manually when values change.\n          event.preventDefault();\n          // Touch devices have a delay before focusing so won't focus if touch immediately moves\n          // away from target (sliding). We want thumb to focus regardless.\n          if (context.thumbs.has(target)) {\n            target.focus();\n          } else {\n            onSlideStart(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n          const target = event.target as HTMLElement;\n          if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const target = event.target as HTMLElement;\n          if (target.hasPointerCapture(event.pointerId)) {\n            target.releasePointerCapture(event.pointerId);\n            onSlideEnd(event);\n          }\n        })}\n      />\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SliderTrack\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRACK_NAME = 'SliderTrack';\n\ntype SliderTrackElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SliderTrackProps extends PrimitiveSpanProps {}\n\nconst SliderTrack = React.forwardRef<SliderTrackElement, SliderTrackProps>(\n  (props: ScopedProps<SliderTrackProps>, forwardedRef) => {\n    const { __scopeSlider, ...trackProps } = props;\n    const context = useSliderContext(TRACK_NAME, __scopeSlider);\n    return (\n      <Primitive.span\n        data-disabled={context.disabled ? '' : undefined}\n        data-orientation={context.orientation}\n        {...trackProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nSliderTrack.displayName = TRACK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderRange\n * -----------------------------------------------------------------------------------------------*/\n\nconst RANGE_NAME = 'SliderRange';\n\ntype SliderRangeElement = React.ElementRef<typeof Primitive.span>;\ninterface SliderRangeProps extends PrimitiveSpanProps {}\n\nconst SliderRange = React.forwardRef<SliderRangeElement, SliderRangeProps>(\n  (props: ScopedProps<SliderRangeProps>, forwardedRef) => {\n    const { __scopeSlider, ...rangeProps } = props;\n    const context = useSliderContext(RANGE_NAME, __scopeSlider);\n    const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);\n    const ref = React.useRef<HTMLSpanElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const valuesCount = context.values.length;\n    const percentages = context.values.map((value) =>\n      convertValueToPercentage(value, context.min, context.max)\n    );\n    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;\n    const offsetEnd = 100 - Math.max(...percentages);\n\n    return (\n      <Primitive.span\n        data-orientation={context.orientation}\n        data-disabled={context.disabled ? '' : undefined}\n        {...rangeProps}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          [orientation.startEdge]: offsetStart + '%',\n          [orientation.endEdge]: offsetEnd + '%',\n        }}\n      />\n    );\n  }\n);\n\nSliderRange.displayName = RANGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SliderThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'SliderThumb';\n\ntype SliderThumbElement = SliderThumbImplElement;\ninterface SliderThumbProps extends Omit<SliderThumbImplProps, 'index'> {}\n\nconst SliderThumb = React.forwardRef<SliderThumbElement, SliderThumbProps>(\n  (props: ScopedProps<SliderThumbProps>, forwardedRef) => {\n    const getItems = useCollection(props.__scopeSlider);\n    const [thumb, setThumb] = React.useState<SliderThumbImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));\n    const index = React.useMemo(\n      () => (thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1),\n      [getItems, thumb]\n    );\n    return <SliderThumbImpl {...props} ref={composedRefs} index={index} />;\n  }\n);\n\ntype SliderThumbImplElement = React.ElementRef<typeof Primitive.span>;\ninterface SliderThumbImplProps extends PrimitiveSpanProps {\n  index: number;\n}\n\nconst SliderThumbImpl = React.forwardRef<SliderThumbImplElement, SliderThumbImplProps>(\n  (props: ScopedProps<SliderThumbImplProps>, forwardedRef) => {\n    const { __scopeSlider, index, ...thumbProps } = props;\n    const context = useSliderContext(THUMB_NAME, __scopeSlider);\n    const orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider);\n    const [thumb, setThumb] = React.useState<HTMLSpanElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));\n    const size = useSize(thumb);\n    // We cast because index could be `-1` which would return undefined\n    const value = context.values[index] as number | undefined;\n    const percent =\n      value === undefined ? 0 : convertValueToPercentage(value, context.min, context.max);\n    const label = getLabel(index, context.values.length);\n    const orientationSize = size?.[orientation.size];\n    const thumbInBoundsOffset = orientationSize\n      ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction)\n      : 0;\n\n    React.useEffect(() => {\n      if (thumb) {\n        context.thumbs.add(thumb);\n        return () => {\n          context.thumbs.delete(thumb);\n        };\n      }\n    }, [thumb, context.thumbs]);\n\n    return (\n      <span\n        style={{\n          transform: 'var(--radix-slider-thumb-transform)',\n          position: 'absolute',\n          [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`,\n        }}\n      >\n        <Collection.ItemSlot scope={props.__scopeSlider}>\n          <Primitive.span\n            role=\"slider\"\n            aria-label={props['aria-label'] || label}\n            aria-valuemin={context.min}\n            aria-valuenow={value}\n            aria-valuemax={context.max}\n            aria-orientation={context.orientation}\n            data-orientation={context.orientation}\n            data-disabled={context.disabled ? '' : undefined}\n            tabIndex={context.disabled ? undefined : 0}\n            {...thumbProps}\n            ref={composedRefs}\n            /**\n             * There will be no value on initial render while we work out the index so we hide thumbs\n             * without a value, otherwise SSR will render them in the wrong position before they\n             * snap into the correct position during hydration which would be visually jarring for\n             * slower connections.\n             */\n            style={value === undefined ? { display: 'none' } : props.style}\n            onFocus={composeEventHandlers(props.onFocus, () => {\n              context.valueIndexToChangeRef.current = index;\n            })}\n          />\n        </Collection.ItemSlot>\n      </span>\n    );\n  }\n);\n\nSliderThumb.displayName = THUMB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst BubbleInput = (props: Radix.ComponentPropsWithoutRef<'input'>) => {\n  const { value, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevValue = usePrevious(value);\n\n  // Bubble value change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'value') as PropertyDescriptor;\n    const setValue = descriptor.set;\n    if (prevValue !== value && setValue) {\n      const event = new Event('input', { bubbles: true });\n      setValue.call(input, value);\n      input.dispatchEvent(event);\n    }\n  }, [prevValue, value]);\n\n  /**\n   * We purposefully do not use `type=\"hidden\"` here otherwise forms that\n   * wrap it will not be able to access its value via the FormData API.\n   *\n   * We purposefully do not add the `value` attribute here to allow the value\n   * to be set programatically and bubble to any parent form `onChange` event.\n   * Adding the `value` will cause React to consider the programatic\n   * dispatch a duplicate and it will get swallowed.\n   */\n  return <input style={{ display: 'none' }} {...inputProps} ref={ref} defaultValue={value} />;\n};\n\nfunction getNextSortedValues(prevValues: number[] = [], nextValue: number, atIndex: number) {\n  const nextValues = [...prevValues];\n  nextValues[atIndex] = nextValue;\n  return nextValues.sort((a, b) => a - b);\n}\n\nfunction convertValueToPercentage(value: number, min: number, max: number) {\n  const maxSteps = max - min;\n  const percentPerStep = 100 / maxSteps;\n  return percentPerStep * (value - min);\n}\n\n/**\n * Returns a label for each thumb when there are two or more thumbs\n */\nfunction getLabel(index: number, totalValues: number) {\n  if (totalValues > 2) {\n    return `Value ${index + 1} of ${totalValues}`;\n  } else if (totalValues === 2) {\n    return ['Minimum', 'Maximum'][index];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Given a `values` array and a `nextValue`, determine which value in\n * the array is closest to `nextValue` and return its index.\n *\n * @example\n * // returns 1\n * getClosestValueIndex([10, 30], 25);\n */\nfunction getClosestValueIndex(values: number[], nextValue: number) {\n  if (values.length === 1) return 0;\n  const distances = values.map((value) => Math.abs(value - nextValue));\n  const closestDistance = Math.min(...distances);\n  return distances.indexOf(closestDistance);\n}\n\n/**\n * Offsets the thumb centre point while sliding to ensure it remains\n * within the bounds of the slider when reaching the edges\n */\nfunction getThumbInBoundsOffset(width: number, left: number, direction: number) {\n  const halfWidth = width / 2;\n  const halfPercent = 50;\n  const offset = linearScale([0, halfPercent], [0, halfWidth]);\n  return (halfWidth - offset(left) * direction) * direction;\n}\n\n/**\n * Gets an array of steps between each value.\n *\n * @example\n * // returns [1, 9]\n * getStepsBetweenValues([10, 11, 20]);\n */\nfunction getStepsBetweenValues(values: number[]) {\n  return values.slice(0, -1).map((value, index) => values[index + 1] - value);\n}\n\n/**\n * Verifies the minimum steps between all values is greater than or equal\n * to the expected minimum steps.\n *\n * @example\n * // returns false\n * hasMinStepsBetweenValues([1,2,3], 2);\n *\n * @example\n * // returns true\n * hasMinStepsBetweenValues([1,2,3], 1);\n */\nfunction hasMinStepsBetweenValues(values: number[], minStepsBetweenValues: number) {\n  if (minStepsBetweenValues > 0) {\n    const stepsBetweenValues = getStepsBetweenValues(values);\n    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);\n    return actualMinStepsBetweenValues >= minStepsBetweenValues;\n  }\n  return true;\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction getDecimalCount(value: number) {\n  return (String(value).split('.')[1] || '').length;\n}\n\nfunction roundValue(value: number, decimalCount: number) {\n  const rounder = Math.pow(10, decimalCount);\n  return Math.round(value * rounder) / rounder;\n}\n\nconst Root = Slider;\nconst Track = SliderTrack;\nconst Range = SliderRange;\nconst Thumb = SliderThumb;\n\nexport {\n  createSliderScope,\n  //\n  Slider,\n  SliderTrack,\n  SliderRange,\n  SliderThumb,\n  //\n  Root,\n  Track,\n  Range,\n  Thumb,\n};\nexport type { SliderProps, SliderTrackProps, SliderRangeProps, SliderThumbProps };\n"],"names":["PAGE_KEYS","ARROW_KEYS","BACK_KEYS","ltr","rtl","Collection","useCollection","createCollectionScope","createCollection","createSliderContext","createSliderScope","createContextScope","SliderProvider","useSliderContext","Slider","React","forwardRef","props","forwardedRef","name","min","max","step","orientation","disabled","minStepsBetweenThumbs","defaultValue","value","onValueChange","sliderProps","slider","setSlider","useState","composedRefs","useComposedRefs","node","thumbRefs","useRef","Set","valueIndexToChangeRef","isHorizontal","isFormControl","Boolean","closest","SliderOrientation","SliderHorizontal","SliderVertical","values","setValues","useControllableState","prop","defaultProp","onChange","_thumbs$valueIndexToC","current","focus","updateValues","atIndex","decimalCount","String","split","length","getDecimalCount","snapToStep","rounder","Math","pow","round","roundValue","nextValue","clamp","prevValues","nextValues","sort","a","b","getNextSortedValues","minStepsBetweenValues","stepsBetweenValues","slice","map","index","getStepsBetweenValues","hasMinStepsBetweenValues","indexOf","_react","createElement","$a68403ced9538b15d14f377d3c557e$var$SliderProvider","scope","__scopeSlider","thumbs","$a68403ced9538b15d14f377d3c557e$var$Collection","Provider","Slot","_babelRuntimeHelpersEsmExtends","undefined","ref","onSlideStart","distances","abs","closestDistance","getClosestValueIndex","onSlideMove","onHomeKeyDown","onEndKeyDown","onStepKeyDown","event","direction","stepDirection","multiplier","includes","key","shiftKey","$a68403ced9538b15d14f377d3c557e$var$BubbleInput","SliderOrientationProvider","useSliderOrientationContext","startEdge","endEdge","size","dir","rectRef","useDirection","isDirectionLTR","getValueFromPointer","pointerPosition","rect","getBoundingClientRect","linearScale","width","left","$a68403ced9538b15d14f377d3c557e$var$SliderOrientationProvider","$a68403ced9538b15d14f377d3c557e$var$SliderImpl","style","clientX","onSlideEnd","isBackKey","sliderRef","height","top","clientY","SliderImpl","context","Primitive","span","onKeyDown","composeEventHandlers","preventDefault","concat","onPointerDown","target","setPointerCapture","pointerId","has","onPointerMove","hasPointerCapture","onPointerUp","releasePointerCapture","SliderTrack","trackProps","SliderRange","rangeProps","valuesCount","percentages","convertValueToPercentage","offsetStart","offsetEnd","SliderThumb","getItems","thumb","setThumb","useMemo","findIndex","item","$a68403ced9538b15d14f377d3c557e$var$SliderThumbImpl","SliderThumbImpl","thumbProps","useSize","percent","label","totalValues","getLabel","orientationSize","thumbInBoundsOffset","halfWidth","offset","getThumbInBoundsOffset","useEffect","add","delete","transform","position","ItemSlot","role","tabIndex","display","onFocus","BubbleInput","inputProps","prevValue","usePrevious","input","inputProto","window","HTMLInputElement","prototype","setValue","Object","getOwnPropertyDescriptor","set","Event","bubbles","call","dispatchEvent","output","ratio","Root","Track","Range","Thumb"],"version":3,"file":"index.module.js.map"}