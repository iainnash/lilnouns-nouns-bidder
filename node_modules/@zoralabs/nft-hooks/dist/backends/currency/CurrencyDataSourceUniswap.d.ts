import DataLoader from 'dataloader';
import { GetTokenPricesQuery } from './uniswap-types';
import { ChainCurrencyType } from './CurrencyInterface';
import { CurrencyInterface, CurrencyLookupType } from './CurrencyInterface';
import { NetworkIDs } from '../../constants/networks';
export declare function transformCurrencyForKey(result: GetTokenPricesQuery, key: string): ChainCurrencyType;
export declare class CurrencyDataSourceUniswap implements CurrencyInterface {
    currencyLoader: DataLoader<string, ChainCurrencyType>;
    endpoint: string;
    timeout: number;
    constructor(networkId: NetworkIDs, timeout?: number);
    /**
     * Gets information of currencies and trading prices from uniswap
     * @param currencies list of currency contract ids on ethereum
     * @returns Promise<CurrencyLookupType>
     */
    loadCurrencies(currencies: string[]): Promise<CurrencyLookupType>;
    /**
     * Internal fetch function to retrieve currency information from TheGraph
     *
     * @function fetchCurrenciesGraph
     * @private
     * @param currencyContracts list of Ethereum addresses of currency contract data to retrieve
     * @returns mapped transformed list of ETH currency mapping data
     */
    private fetchCurrenciesGraph;
}
