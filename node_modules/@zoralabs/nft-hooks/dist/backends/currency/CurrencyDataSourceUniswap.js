"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyDataSourceUniswap = exports.transformCurrencyForKey = void 0;
const tslib_1 = require("tslib");
const dataloader_1 = tslib_1.__importDefault(require("dataloader"));
const graphql_request_1 = require("graphql-request");
const uniswap_1 = require("./uniswap");
const CurrencyInterface_1 = require("./CurrencyInterface");
const RequestError_1 = require("../../fetcher/RequestError");
const urls_1 = require("../../constants/urls");
const FetchWithTimeout_1 = require("../../fetcher/FetchWithTimeout");
function transformCurrencyForKey(result, key) {
    var _a, _b;
    // Special case ETH
    if (key === CurrencyInterface_1.NULL_ETH_CURRENCY_ID) {
        return {
            ethToUsd: (_a = result.bundle) === null || _a === void 0 ? void 0 : _a.ethPrice,
            token: {
                symbol: 'ETH',
                name: 'Ethereum',
                id: CurrencyInterface_1.NULL_ETH_CURRENCY_ID,
                decimals: 18,
                derivedETH: 1,
            },
        };
    }
    const currency = result.tokens.find((token) => token.id === key);
    if (!currency) {
        throw new RequestError_1.RequestError('No currency in response');
    }
    return {
        ethToUsd: (_b = result.bundle) === null || _b === void 0 ? void 0 : _b.ethPrice,
        token: currency,
    };
}
exports.transformCurrencyForKey = transformCurrencyForKey;
class CurrencyDataSourceUniswap {
    constructor(networkId, timeout = 10) {
        this.currencyLoader = new dataloader_1.default(this.fetchCurrenciesGraph);
        this.endpoint = urls_1.THEGRAPH_UNISWAP_URL_BY_NETWORK[networkId];
        this.timeout = timeout;
    }
    /**
     * Gets information of currencies and trading prices from uniswap
     * @param currencies list of currency contract ids on ethereum
     * @returns Promise<CurrencyLookupType>
     */
    async loadCurrencies(currencies) {
        const results = await this.currencyLoader.loadMany(currencies);
        return results.reduce((last, result) => {
            if (!(result instanceof Error)) {
                last[result.token.id] = result;
            }
            return last;
        }, {});
    }
    /**
     * Internal fetch function to retrieve currency information from TheGraph
     *
     * @function fetchCurrenciesGraph
     * @private
     * @param currencyContracts list of Ethereum addresses of currency contract data to retrieve
     * @returns mapped transformed list of ETH currency mapping data
     */
    async fetchCurrenciesGraph(currencyContracts) {
        const fetchWithTimeout = new FetchWithTimeout_1.FetchWithTimeout(this.timeout);
        const client = new graphql_request_1.GraphQLClient(this.endpoint, {
            fetch: fetchWithTimeout.fetch,
        });
        const currencies = (await client.request(uniswap_1.GET_TOKEN_VALUES_QUERY, {
            currencyContracts,
        }));
        return currencyContracts.map((key) => transformCurrencyForKey(currencies, key));
    }
}
exports.CurrencyDataSourceUniswap = CurrencyDataSourceUniswap;
