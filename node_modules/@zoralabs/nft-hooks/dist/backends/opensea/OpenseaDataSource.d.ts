import DataLoader from 'dataloader';
import { NFTQuery, NFTQueryResult } from '../../types/NFTQuery';
import { NetworkIDs } from '../../constants/networks';
import { NFTIdentifier, NFTObject } from '../../types/NFTInterface';
import { OpenseaAsset, OpenseaInterface } from './OpenseaInterface';
export declare class OpenseaDataSource implements OpenseaInterface {
    nftsLoader: DataLoader<string, OpenseaAsset | Error>;
    endpoint: string;
    timeout: number;
    MAX_OPENSEA_SIZE: number;
    constructor(networkId: NetworkIDs, timeout?: number);
    loadNFT: ({ contract, id }: NFTIdentifier) => Promise<OpenseaAsset | Error>;
    loadNFTs: (nfts: readonly NFTIdentifier[]) => Promise<(OpenseaAsset | Error)[]>;
    canLoadNFT(): boolean;
    transformNFT(asset: OpenseaAsset, object?: NFTObject): NFTObject;
    fetchNFTsOpensea: (nftAddressesAndTokens: readonly string[]) => Promise<(Error | OpenseaAsset)[]>;
    queryNFTs(_: NFTQuery): Promise<NFTQueryResult>;
}
