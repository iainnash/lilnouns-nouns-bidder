"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformEvents = void 0;
const queries_sdk_1 = require("@zoralabs/zdk/dist/queries/queries-sdk");
const types_1 = require("../../../types");
const addresses_1 = require("../../../constants/addresses");
const dateToISO_1 = require("../utils/dateToISO");
const transformMarketEvent_1 = require("./transformMarketEvent");
function transformEvents(events) {
    const eventsList = [];
    events.forEach((tokenEvent) => {
        var _a, _b, _c, _d, _e, _f;
        const common = {
            at: {
                timestamp: (0, dateToISO_1.dateToISO)(tokenEvent.transactionInfo.blockTimestamp),
                blockNumber: tokenEvent.transactionInfo.blockNumber,
                transactionHash: tokenEvent.transactionInfo.transactionHash || undefined,
            },
        };
        if (tokenEvent.eventType === queries_sdk_1.EventType.MintEvent &&
            tokenEvent.properties.__typename === 'MintEvent') {
            eventsList.push({
                ...common,
                from: addresses_1.ZERO_ADDRESS,
                to: tokenEvent.properties.toAddress,
                type: types_1.TOKEN_TRANSFER_EVENT_TYPES.MINT,
                eventType: types_1.TOKEN_TRANSFER_EVENT_CONTEXT_TYPES.TOKEN_TRANSFER_EVENT,
                raw: {
                    source: types_1.MEDIA_SOURCES.ZORA,
                    data: tokenEvent,
                },
            });
        }
        if (tokenEvent.eventType === queries_sdk_1.EventType.TransferEvent &&
            tokenEvent.properties.__typename === 'TransferEvent') {
            eventsList.push({
                ...common,
                from: tokenEvent.properties.fromAddress,
                to: tokenEvent.properties.toAddress,
                eventType: types_1.TOKEN_TRANSFER_EVENT_CONTEXT_TYPES.TOKEN_TRANSFER_EVENT,
                type: tokenEvent.properties.toAddress === addresses_1.ZERO_ADDRESS
                    ? types_1.TOKEN_TRANSFER_EVENT_TYPES.BURN
                    : types_1.TOKEN_TRANSFER_EVENT_TYPES.TRANSFER,
                raw: {
                    source: types_1.MEDIA_SOURCES.ZORA,
                    data: tokenEvent,
                },
            });
        }
        if (tokenEvent.eventType === queries_sdk_1.EventType.V1MarketEvent &&
            tokenEvent.properties.__typename === 'V1MarketEvent') {
            const e = (0, transformMarketEvent_1.transformMarketEvent)(tokenEvent);
            if (e) {
                eventsList.push(e);
            }
        }
        if (tokenEvent.eventType === queries_sdk_1.EventType.V2AuctionEvent &&
            tokenEvent.properties.__typename === 'V2AuctionEvent') {
            let event = undefined;
            switch (tokenEvent.properties.v2AuctionEventType) {
                case queries_sdk_1.V2AuctionEventType.V2AuctionCreated:
                    event = types_1.AUCTION_EVENT_TYPES.AUCTION_CREATED;
                    break;
                case queries_sdk_1.V2AuctionEventType.V2AuctionCanceled:
                    event = types_1.AUCTION_EVENT_TYPES.AUCTION_CANCELLED;
                    break;
                case queries_sdk_1.V2AuctionEventType.V2AuctionBid:
                    event = types_1.AUCTION_EVENT_TYPES.AUCTION_BID;
                    break;
                case queries_sdk_1.V2AuctionEventType.V2AuctionApprovalUpdated:
                    event = types_1.AUCTION_EVENT_TYPES.AUCTION_APPROVED;
                    break;
                // Not necessarily useful to display
                // case V2AuctionEventType.V2AuctionDurationExtended:
                //   event = AUCTION_EVENT_TYPES.AUCTION_UPDATED;
                //   break;
                // case V2AuctionEventType.V2AuctionReservePriceUpdated:
                //   event = AUCTION_EVENT_TYPES.AUCTION_UPDATED;
                //   break;
                case queries_sdk_1.V2AuctionEventType.V2AuctionEnded:
                    event = types_1.AUCTION_EVENT_TYPES.AUCTION_ENDED;
                    break;
            }
            if (!event) {
                return;
            }
            eventsList.push({
                ...common,
                event: event,
                sender: tokenEvent.properties.address,
                marketAddress: tokenEvent.properties.collectionAddress,
                eventType: types_1.TOKEN_TRANSFER_EVENT_CONTEXT_TYPES.TOKEN_MARKET_EVENT,
                blockInfo: {
                    timestamp: tokenEvent.transactionInfo.blockTimestamp,
                    blockNumber: tokenEvent.transactionInfo.blockNumber,
                },
                raw: {
                    source: types_1.AUCTION_SOURCE_TYPES.ZORA_RESERVE_V2,
                    raw: tokenEvent,
                },
            });
        }
        if (tokenEvent.eventType === queries_sdk_1.EventType.V3AskEvent &&
            tokenEvent.properties.__typename === 'V3AskEvent') {
            let event = undefined;
            switch (tokenEvent.properties.v3AskEventType) {
                case queries_sdk_1.V3AskEventType.V3AskCanceled:
                    event = types_1.FIXED_PRICE_EVENT_TYPES.FIXED_PRICE_CANCELLED;
                    break;
                case queries_sdk_1.V3AskEventType.V3AskCreated:
                    event = types_1.FIXED_PRICE_EVENT_TYPES.FIXED_PRICE_CREATED;
                    break;
                case queries_sdk_1.V3AskEventType.V3AskFilled:
                    event = types_1.FIXED_PRICE_EVENT_TYPES.FIXED_PRICE_FILLED;
                    break;
                case queries_sdk_1.V3AskEventType.V3AskPriceUpdated:
                    event = types_1.FIXED_PRICE_EVENT_TYPES.FIXED_PRICE_UPDATED;
                    break;
            }
            const filledAskFields = ((_b = (_a = tokenEvent.properties) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.__typename) === 'V3AskFilledEventProperties'
                ? {
                    buyer: tokenEvent.properties.properties.buyer,
                    seller: tokenEvent.properties.properties.seller,
                }
                : {};
            const fixedPriceFields = ((_d = (_c = tokenEvent.properties) === null || _c === void 0 ? void 0 : _c.properties) === null || _d === void 0 ? void 0 : _d.__typename) === 'V3AskCreatedEventProperties' ||
                ((_f = (_e = tokenEvent.properties) === null || _e === void 0 ? void 0 : _e.properties) === null || _f === void 0 ? void 0 : _f.__typename) ===
                    'V3AskPriceUpdatedEventProperties'
                ? {
                    seller: tokenEvent.properties.properties.seller,
                }
                : {};
            eventsList.push({
                ...common,
                ...filledAskFields,
                ...fixedPriceFields,
                sender: tokenEvent.properties.address,
                marketAddress: tokenEvent.properties.collectionAddress,
                blockInfo: {
                    timestamp: tokenEvent.transactionInfo.blockTimestamp,
                    blockNumber: tokenEvent.transactionInfo.blockNumber,
                },
                event,
                eventType: types_1.TOKEN_TRANSFER_EVENT_CONTEXT_TYPES.TOKEN_MARKET_EVENT,
                side: types_1.FIXED_SIDE_TYPES.ASK,
                raw: {
                    source: types_1.FIXED_PRICE_MARKET_SOURCES.ZORA_ASK_V3,
                    data: tokenEvent,
                },
            });
        }
    });
    return eventsList;
}
exports.transformEvents = transformEvents;
