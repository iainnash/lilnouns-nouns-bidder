"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformMarkets = void 0;
const queries_sdk_1 = require("@zoralabs/zdk/dist/queries/queries-sdk");
const types_1 = require("../../../types");
const dateToISO_1 = require("../utils/dateToISO");
const getStandardMarketData_1 = require("../utils/getStandardMarketData");
function transformMarkets(markets) {
    const getReserveAuctionStatus = (status) => {
        if (status === queries_sdk_1.V2AuctionStatus.Active) {
            return types_1.MARKET_INFO_STATUSES.ACTIVE;
        }
        if (status === queries_sdk_1.V2AuctionStatus.Canceled) {
            return types_1.MARKET_INFO_STATUSES.CANCELED;
        }
        if (status === queries_sdk_1.V2AuctionStatus.Completed) {
            return types_1.MARKET_INFO_STATUSES.COMPLETE;
        }
        return types_1.MARKET_INFO_STATUSES.UNKNOWN;
    };
    const getV1MarketFixedPriceStatus = (status) => {
        if (status === queries_sdk_1.V1MarketEntityStatus.Active) {
            return types_1.MARKET_INFO_STATUSES.ACTIVE;
        }
        if (status === queries_sdk_1.V1MarketEntityStatus.Canceled) {
            return types_1.MARKET_INFO_STATUSES.CANCELED;
        }
        if (status === queries_sdk_1.V1MarketEntityStatus.Completed) {
            return types_1.MARKET_INFO_STATUSES.COMPLETE;
        }
        return types_1.MARKET_INFO_STATUSES.UNKNOWN;
    };
    const getV3AskStatus = (status) => {
        if (status === queries_sdk_1.V3AskStatus.Active) {
            return types_1.MARKET_INFO_STATUSES.ACTIVE;
        }
        if (status === queries_sdk_1.V3AskStatus.Canceled) {
            return types_1.MARKET_INFO_STATUSES.CANCELED;
        }
        if (status === queries_sdk_1.V3AskStatus.Completed) {
            return types_1.MARKET_INFO_STATUSES.COMPLETE;
        }
        return types_1.MARKET_INFO_STATUSES.UNKNOWN;
    };
    const marketResponse = [];
    markets.forEach((market) => {
        var _a, _b;
        if (market.marketType === queries_sdk_1.MarketType.V1Ask &&
            market.properties.__typename === 'V1Ask') {
            marketResponse.push({
                type: types_1.MARKET_TYPES.FIXED_PRICE,
                source: types_1.FIXED_PRICE_MARKET_SOURCES.ZORA_ASK_V1,
                side: types_1.FIXED_SIDE_TYPES.ASK,
                // TODO(iain): fix naming
                status: getV1MarketFixedPriceStatus(market.properties.v1AskStatus),
                ...(0, getStandardMarketData_1.getStandardMarketData)({ market, amount: market.properties.amount }),
            });
        }
        if (market.marketType === queries_sdk_1.MarketType.V1Offer &&
            market.properties.__typename === 'V1Offer') {
            marketResponse.push({
                type: types_1.MARKET_TYPES.FIXED_PRICE,
                source: types_1.FIXED_PRICE_MARKET_SOURCES.ZORA_ASK_V1,
                side: types_1.FIXED_SIDE_TYPES.OFFER,
                status: getV1MarketFixedPriceStatus(market.properties.v1OfferStatus),
                ...(0, getStandardMarketData_1.getStandardMarketData)({ market, amount: market.properties.amount }),
            });
        }
        if (market.marketType === queries_sdk_1.MarketType.V2Auction &&
            market.properties.__typename === 'V2Auction') {
            const expiresAt = market.properties.estimatedExpirationTime;
            marketResponse.push({
                type: types_1.MARKET_TYPES.AUCTION,
                source: types_1.AUCTION_SOURCE_TYPES.ZORA_RESERVE_V2,
                status: getReserveAuctionStatus(market.properties.v2AuctionStatus),
                auctionId: market.properties.auctionId,
                // Duration shouldn't be able to overflow
                duration: parseInt(market.properties.duration, 10),
                startedAt: market.properties.firstBidTime
                    ? {
                        timestamp: market.properties.firstBidTime,
                    }
                    : undefined,
                bids: [],
                endsAt: market.properties.firstBidTime
                    ? {
                        timestamp: (0, dateToISO_1.dateToISO)(expiresAt),
                    }
                    : undefined,
                currentBid: market.properties.highestBidder && market.properties.highestBidPrice
                    ? {
                        creator: market.properties.highestBidder,
                        created: {
                            timestamp: (0, dateToISO_1.dateToISO)(market.transactionInfo.blockTimestamp),
                        },
                        amount: {
                            usd: market.properties.highestBidPrice.usdcPrice
                                ? {
                                    value: (_a = market.properties.highestBidPrice.usdcPrice) === null || _a === void 0 ? void 0 : _a.decimal,
                                    raw: (_b = market.properties.highestBidPrice.usdcPrice) === null || _b === void 0 ? void 0 : _b.raw,
                                    decimals: 18,
                                }
                                : undefined,
                            eth: market.properties.highestBidPrice.nativePrice
                                ? {
                                    value: market.properties.highestBidPrice.nativePrice.decimal,
                                    raw: market.properties.highestBidPrice.nativePrice.raw,
                                    decimals: 18,
                                }
                                : undefined,
                            amount: {
                                raw: market.properties.highestBidPrice.nativePrice.raw,
                                value: market.properties.highestBidPrice.nativePrice.decimal,
                                decimals: market.properties.highestBidPrice.nativePrice.currency.decimals ||
                                    undefined,
                            },
                            symbol: market.properties.highestBidPrice.nativePrice.currency.name,
                            name: market.properties.highestBidPrice.nativePrice.currency.name,
                            address: market.properties.highestBidPrice.nativePrice.currency.address,
                        },
                    }
                    : undefined,
                ...(0, getStandardMarketData_1.getStandardMarketData)({
                    market,
                    amount: market.properties.highestBidPrice || market.properties.reservePrice,
                }),
            });
        }
        if (market.marketType === queries_sdk_1.MarketType.V3Ask &&
            market.properties.__typename === 'V3Ask') {
            marketResponse.push({
                type: types_1.MARKET_TYPES.FIXED_PRICE,
                source: types_1.FIXED_PRICE_MARKET_SOURCES.ZORA_ASK_V3,
                side: types_1.FIXED_SIDE_TYPES.ASK,
                status: getV3AskStatus(market.properties.v3AskStatus),
                ...(0, getStandardMarketData_1.getStandardMarketData)({ market, amount: market.properties.askPrice }),
            });
        }
    });
    return marketResponse;
}
exports.transformMarkets = transformMarkets;
