import DataLoader from 'dataloader';
import { GraphQLClient } from 'graphql-request';
import { NetworkIDs } from '../../constants/networks';
import { NftMediaFullDataFragment } from './zora-graph-types';
import { FetchGroupTypes, ZoraGraphDataInterface, ZoraGraphDataResponse } from './ZoraGraphDataInterface';
import { NFTIdentifier, NFTObject } from '../../types/NFTInterface';
import { GenericMediaInterface } from '../generic-media/GenericMediaInterface';
import { NFTQuery, NFTQueryResult } from '../../types/NFTQuery';
export declare function transformNFTZoraGraph(mediaContractAddress: string, { asset, metadata }: {
    asset: NftMediaFullDataFragment;
    metadata: any;
}, object?: NFTObject): NFTObject;
export declare class ZoraGraphDataSource implements ZoraGraphDataInterface {
    nftGraphDataLoader: DataLoader<string, ZoraGraphDataResponse>;
    networkId: NetworkIDs;
    timeout: number;
    endpoint: string;
    mediaContractAddress: string;
    genericMetadataFetcher: GenericMediaInterface;
    constructor(networkId: NetworkIDs, timeout?: number, endpoint?: string, genericMetadataFetcher?: GenericMediaInterface, mediaContractAddress?: string);
    canLoadNFT(): boolean;
    transformNFT(data: {
        asset: NftMediaFullDataFragment;
        metadata: any;
    }, object?: NFTObject): NFTObject;
    loadNFT: ({ contract, id }: {
        contract: string;
        id: string;
    }) => Promise<ZoraGraphDataResponse>;
    loadNFTs(nfts: readonly NFTIdentifier[]): Promise<(Error | ZoraGraphDataResponse)[]>;
    getClient(): GraphQLClient;
    fetchNFTs: (mediaIds: readonly string[]) => Promise<(Error | {
        asset: {
            __typename?: "Media" | undefined;
        } & {
            __typename?: "Media" | undefined;
        } & {
            currentBids?: import("./zora-graph-types").Maybe<({
                __typename?: "Bid" | undefined;
            } & {
                __typename?: "Bid" | undefined;
            } & Pick<import("./zora-graph-types").Bid, "id" | "amount" | "createdAtTimestamp" | "transactionHash" | "createdAtBlockNumber"> & {
                bidder: {
                    __typename?: "User" | undefined;
                } & Pick<import("./zora-graph-types").User, "id">;
                currency: {
                    __typename?: "Currency" | undefined;
                } & {
                    __typename?: "Currency" | undefined;
                } & Pick<import("./zora-graph-types").Currency, "symbol" | "id" | "name" | "decimals">;
            })[]> | undefined;
            transfers?: import("./zora-graph-types").Maybe<({
                __typename?: "Transfer" | undefined;
            } & {
                __typename?: "Transfer" | undefined;
            } & Pick<import("./zora-graph-types").Transfer, "id" | "createdAtTimestamp" | "transactionHash" | "createdAtBlockNumber"> & {
                from: {
                    __typename?: "User" | undefined;
                } & Pick<import("./zora-graph-types").User, "id">;
                to: {
                    __typename?: "User" | undefined;
                } & Pick<import("./zora-graph-types").User, "id">;
            })[]> | undefined;
            reserveAuctions?: import("./zora-graph-types").Maybe<({
                __typename?: "ReserveAuction" | undefined;
            } & {
                __typename?: "ReserveAuction" | undefined;
            } & Pick<import("./zora-graph-types").ReserveAuction, "id" | "status" | "token" | "tokenId" | "duration" | "reservePrice" | "firstBidTime" | "createdAtTimestamp" | "transactionHash" | "createdAtBlockNumber" | "approved" | "tokenContract" | "approvedTimestamp" | "curatorFeePercentage" | "expectedEndTimestamp" | "finalizedAtTimestamp"> & {
                curator: {
                    __typename?: "User" | undefined;
                } & Pick<import("./zora-graph-types").User, "id">;
                tokenOwner: {
                    __typename?: "User" | undefined;
                } & Pick<import("./zora-graph-types").User, "id">;
                auctionCurrency: {
                    __typename?: "Currency" | undefined;
                } & {
                    __typename?: "Currency" | undefined;
                } & Pick<import("./zora-graph-types").Currency, "symbol" | "id" | "name" | "decimals">;
                currentBid?: import("./zora-graph-types").Maybe<{
                    __typename?: "ReserveAuctionBid" | undefined;
                } & {
                    __typename?: "ReserveAuctionBid" | undefined;
                } & Pick<import("./zora-graph-types").ReserveAuctionBid, "amount" | "createdAtTimestamp" | "transactionHash" | "bidType"> & {
                    bidder: {
                        __typename?: "User" | undefined;
                    } & Pick<import("./zora-graph-types").User, "id">;
                }> | undefined;
                previousBids?: import("./zora-graph-types").Maybe<({
                    __typename?: "InactiveReserveAuctionBid" | undefined;
                } & {
                    __typename?: "InactiveReserveAuctionBid" | undefined;
                } & Pick<import("./zora-graph-types").InactiveReserveAuctionBid, "id" | "amount" | "createdAtTimestamp" | "transactionHash" | "bidType" | "bidInactivatedAtTimestamp" | "bidInactivatedAtBlockNumber"> & {
                    bidder: {
                        __typename?: "User" | undefined;
                    } & Pick<import("./zora-graph-types").User, "id">;
                })[]> | undefined;
            })[]> | undefined;
        } & {
            __typename?: "Media" | undefined;
        } & Pick<import("./zora-graph-types").Media, "id" | "metadataURI" | "contentURI" | "createdAtTimestamp" | "creatorBidShare" | "ownerBidShare" | "metadataHash" | "contentHash"> & {
            owner: {
                __typename?: "User" | undefined;
            } & Pick<import("./zora-graph-types").User, "id">;
            creator: {
                __typename?: "User" | undefined;
            } & Pick<import("./zora-graph-types").User, "id">;
            currentAsk?: import("./zora-graph-types").Maybe<{
                __typename?: "Ask" | undefined;
            } & {
                __typename?: "Ask" | undefined;
            } & Pick<import("./zora-graph-types").Ask, "id" | "amount" | "createdAtTimestamp"> & {
                currency: {
                    __typename?: "Currency" | undefined;
                } & {
                    __typename?: "Currency" | undefined;
                } & Pick<import("./zora-graph-types").Currency, "symbol" | "id" | "name" | "decimals">;
            }> | undefined;
        };
        metadata: any;
    })[]>;
    queryNFTs: ({ query, sort, pagination, additional, }: NFTQuery) => Promise<NFTQueryResult>;
    /**
     * Un-batched fetch function to fetch a group of ZNFT data
     *
     * @param ids list of ids to query
     * @param type type of ids: creator, id (of media), owner
     * @returns
     */
    fetchZNFTGroup(ids: string[], type: FetchGroupTypes, fetchMetadata?: boolean): Promise<NFTObject[]>;
}
