import type { NetworkIDs } from '../constants/networks';
import { CurrencyInterface, CurrencyLookupType } from '../backends/currency/CurrencyInterface';
import { ZoraUserInterface } from '../backends/zora-user/ZoraUserInterface';
import { ENSInterface } from '../backends/ens-reverse/ENSInterface';
import { GenericMediaInterface, MediaContentType } from '../backends/generic-media/GenericMediaInterface';
/**
 * Internal agent for NFT Hooks to fetch NFT information.
 * Can be used directly for interaction with non-react web frameworks or server frameworks.
 * Uses a cached promise-based API.
 * Fetches from IPFS providers and thegraph.
 */
export declare class MediaFetchAgent {
    readonly networkId: NetworkIDs;
    private timeouts;
    currencyFetcher: CurrencyInterface;
    usernameFetcher: ZoraUserInterface;
    ensFetcher: ENSInterface;
    genericMediaFetcher: GenericMediaInterface;
    constructor(network: NetworkIDs);
    /**
     * Gets information of currencies and trading prices from uniswap
     * @param currencies list of currency contract ids on ethereum
     * @returns Promise<CurrencyLookupType>
     */
    loadCurrencies: (currencies: string[]) => Promise<CurrencyLookupType>;
    /**
     * Fetch NFT content or retun URI if content shouild not be fetched
     * @param url NFT Content URL
     * @param contentType string mime type to fetch
     * @returns Promise<MediaContentType> Media content information or URL
     */
    fetchContent: (url: string, contentType: string) => Promise<MediaContentType>;
    /**
     * Fetch Content MIME type from content URI
     *
     * @param url IPFS Content URI
     * @returns mime type as a string
     * @throws RequestError
     */
    fetchContentMimeType: (url: string) => Promise<string>;
    /**
     *
     * @param address string address of username to load
     * @returns
     */
    loadUsername(address: string): Promise<Error | import("../backends/zora-user/ZoraUserInterface").UsernameResponseType>;
    loadEnsName(address: string): Promise<import("../backends/ens-reverse/ENSInterface").ENSInfo>;
    /**
     * Fetches zora username information from blockchain addresses for displaying user
     * information.
     *
     * @param addresses string list of addresses to map to Zora usernames
     * @returns list of UsernameResponseType - all fields are optional except address
     */
    fetchZoraUsernames(addresses: readonly string[]): Promise<(Error | import("../backends/zora-user/ZoraUserInterface").UsernameResponseType)[]>;
    /**
     * Internal fetch function to retrieve currency information from TheGraph
     *
     * @function fetchCurrenciesGraph
     * @private
     * @param currencyContracts list of Ethereum addresses of currency contract data to retrieve
     * @returns mapped transformed list of ETH currency mapping data
     */
    fetchCurrenciesGraph(currencyContracts: readonly string[]): Promise<CurrencyLookupType>;
    /**
     * Fetch method to query metadata from IPFS. Not cached
     *
     * @function fetchIPFSMetadataCached
     * @public
     * @param url Metadata Source
     * @returns IPFS Metadata Fetch
     * @throws RequestError
     */
    fetchIPFSMetadata: (url: string) => Promise<any>;
}
