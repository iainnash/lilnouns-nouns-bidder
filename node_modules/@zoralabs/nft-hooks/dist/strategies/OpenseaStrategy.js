"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenseaStrategy = void 0;
const backends_1 = require("../backends");
const NFTStrategy_1 = require("./NFTStrategy");
class OpenseaStrategy extends NFTStrategy_1.NFTStrategy {
    constructor(networkId) {
        super(networkId);
        this.fetchNFT = async (contract, id) => {
            const openseaNFT = await this.openseaBackend.loadNFT({ contract, id });
            if (openseaNFT instanceof Error) {
                throw openseaNFT;
            }
            return this.openseaBackend.transformNFT(openseaNFT);
        };
        this.hasSecondaryData = () => true;
        this.fetchSecondaryData = async (contract, id) => {
            return await this.auctionBackend.loadAuctionInfo(contract, id);
        };
        this.queryNFTs = async (query) => {
            return await this.openseaBackend.queryNFTs(query);
        };
        this.auctionBackend = new backends_1.GraphAuctionDataSource(networkId);
        this.openseaBackend = new backends_1.OpenseaDataSource(networkId);
    }
}
exports.OpenseaStrategy = OpenseaStrategy;
