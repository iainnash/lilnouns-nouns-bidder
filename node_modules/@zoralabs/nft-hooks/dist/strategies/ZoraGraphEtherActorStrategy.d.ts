import { EtherActorDataSource, GraphAuctionDataSource } from '../backends';
import { NetworkIDs } from '../constants/networks';
import { NFTStrategy } from './NFTStrategy';
import { NFTQuery, NFTQueryResult } from '../types/NFTQuery';
export declare class ZoraGraphEtherActorStrategy extends NFTStrategy {
    graphAuctionData: GraphAuctionDataSource;
    etherActorSource: EtherActorDataSource;
    constructor(networkId: NetworkIDs, timeout?: number);
    fetchNFT: (contract: string, id: string) => Promise<import("..").NFTObject>;
    hasSecondaryData: () => boolean;
    fetchMarket: (contract: string, id: string) => Promise<import("..").NFTObject>;
    queryNFTs: (_: NFTQuery) => Promise<NFTQueryResult>;
}
