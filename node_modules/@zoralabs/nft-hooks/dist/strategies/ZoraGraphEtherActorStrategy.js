"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoraGraphEtherActorStrategy = void 0;
const backends_1 = require("../backends");
const NFTStrategy_1 = require("./NFTStrategy");
class ZoraGraphEtherActorStrategy extends NFTStrategy_1.NFTStrategy {
    constructor(networkId, timeout = 2) {
        super(networkId);
        this.fetchNFT = async (contract, id) => {
            const loadedNft = await this.etherActorSource.loadNFT({ contract, id });
            if (loadedNft instanceof Error) {
                throw loadedNft;
            }
            return this.etherActorSource.transformNFT(loadedNft, { rawData: {} });
        };
        this.hasSecondaryData = () => true;
        this.fetchMarket = async (contract, id) => {
            return await this.graphAuctionData.loadAuctionInfo(contract, id);
        };
        this.queryNFTs = async (_) => {
            throw new Error('Not implemented');
        };
        this.graphAuctionData = new backends_1.GraphAuctionDataSource(networkId);
        this.etherActorSource = new backends_1.EtherActorDataSource(networkId, timeout);
    }
}
exports.ZoraGraphEtherActorStrategy = ZoraGraphEtherActorStrategy;
