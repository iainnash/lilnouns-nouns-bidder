/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace AsksDataStorage {
  export type TokenGateStruct = {
    token: PromiseOrValue<string>;
    minAmount: PromiseOrValue<BigNumberish>;
  };

  export type TokenGateStructOutput = [string, BigNumber] & {
    token: string;
    minAmount: BigNumber;
  };

  export type ListingFeeStruct = {
    listingFeeBps: PromiseOrValue<BigNumberish>;
    listingFeeRecipient: PromiseOrValue<string>;
  };

  export type ListingFeeStructOutput = [number, string] & {
    listingFeeBps: number;
    listingFeeRecipient: string;
  };

  export type FullAskStruct = {
    price: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    expiry: PromiseOrValue<BigNumberish>;
    sellerFundsRecipient: PromiseOrValue<string>;
    findersFeeBps: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    buyer: PromiseOrValue<string>;
    tokenGate: AsksDataStorage.TokenGateStruct;
    listingFee: AsksDataStorage.ListingFeeStruct;
  };

  export type FullAskStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    number,
    string,
    string,
    AsksDataStorage.TokenGateStructOutput,
    AsksDataStorage.ListingFeeStructOutput
  ] & {
    price: BigNumber;
    seller: string;
    expiry: BigNumber;
    sellerFundsRecipient: string;
    findersFeeBps: number;
    currency: string;
    buyer: string;
    tokenGate: AsksDataStorage.TokenGateStructOutput;
    listingFee: AsksDataStorage.ListingFeeStructOutput;
  };
}

export interface StorageTestBaseMinimalInterface extends utils.Interface {
  functions: {
    "askForNFT(address,uint256)": FunctionFragment;
    "getExpectedActiveFeatures()": FunctionFragment;
    "getFullAsk(address,uint256)": FunctionFragment;
    "hasFeature(address,uint256,uint32)": FunctionFragment;
    "newAsk(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "askForNFT"
      | "getExpectedActiveFeatures"
      | "getFullAsk"
      | "hasFeature"
      | "newAsk"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "askForNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedActiveFeatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFullAsk",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFeature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newAsk",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "askForNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedActiveFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFullAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasFeature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAsk", data: BytesLike): Result;

  events: {};
}

export interface StorageTestBaseMinimal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageTestBaseMinimalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    askForNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        price: BigNumber;
        seller: string;
        features: number;
      }
    >;

    getExpectedActiveFeatures(overrides?: CallOverrides): Promise<[number]>;

    getFullAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AsksDataStorage.FullAskStructOutput]>;

    hasFeature(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      feature: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  askForNFT(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number] & {
      price: BigNumber;
      seller: string;
      features: number;
    }
  >;

  getExpectedActiveFeatures(overrides?: CallOverrides): Promise<number>;

  getFullAsk(
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AsksDataStorage.FullAskStructOutput>;

  hasFeature(
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    feature: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newAsk(
    tokenContract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    askForNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        price: BigNumber;
        seller: string;
        features: number;
      }
    >;

    getExpectedActiveFeatures(overrides?: CallOverrides): Promise<number>;

    getFullAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AsksDataStorage.FullAskStructOutput>;

    hasFeature(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      feature: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    askForNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedActiveFeatures(overrides?: CallOverrides): Promise<BigNumber>;

    getFullAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFeature(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      feature: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    askForNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedActiveFeatures(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasFeature(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      feature: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newAsk(
      tokenContract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
