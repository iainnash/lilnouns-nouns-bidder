/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace UniversalExchangeEventV1 {
  export type ExchangeDetailsStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ExchangeDetailsStructOutput = [string, BigNumber, BigNumber] & {
    tokenContract: string;
    tokenId: BigNumber;
    amount: BigNumber;
  };
}

export interface UniversalExchangeEventV1Interface extends utils.Interface {
  functions: {};

  events: {
    "ExchangeExecuted(address,address,tuple,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeExecuted"): EventFragment;
}

export interface ExchangeExecutedEventObject {
  userA: string;
  userB: string;
  a: UniversalExchangeEventV1.ExchangeDetailsStructOutput;
  b: UniversalExchangeEventV1.ExchangeDetailsStructOutput;
}
export type ExchangeExecutedEvent = TypedEvent<
  [
    string,
    string,
    UniversalExchangeEventV1.ExchangeDetailsStructOutput,
    UniversalExchangeEventV1.ExchangeDetailsStructOutput
  ],
  ExchangeExecutedEventObject
>;

export type ExchangeExecutedEventFilter =
  TypedEventFilter<ExchangeExecutedEvent>;

export interface UniversalExchangeEventV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalExchangeEventV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ExchangeExecuted(address,address,tuple,tuple)"(
      userA?: PromiseOrValue<string> | null,
      userB?: PromiseOrValue<string> | null,
      a?: null,
      b?: null
    ): ExchangeExecutedEventFilter;
    ExchangeExecuted(
      userA?: PromiseOrValue<string> | null,
      userB?: PromiseOrValue<string> | null,
      a?: null,
      b?: null
    ): ExchangeExecutedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
