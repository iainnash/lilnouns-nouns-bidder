/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StorageTestBaseMinimal,
  StorageTestBaseMinimalInterface,
} from "../../AsksDataStorage.t.sol/StorageTestBaseMinimal";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "askForNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "features",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getExpectedActiveFeatures",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getFullAsk",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "expiry",
            type: "uint96",
          },
          {
            internalType: "address",
            name: "sellerFundsRecipient",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "findersFeeBps",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "minAmount",
                type: "uint256",
              },
            ],
            internalType: "struct AsksDataStorage.TokenGate",
            name: "tokenGate",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "listingFeeBps",
                type: "uint16",
              },
              {
                internalType: "address",
                name: "listingFeeRecipient",
                type: "address",
              },
            ],
            internalType: "struct AsksDataStorage.ListingFee",
            name: "listingFee",
            type: "tuple",
          },
        ],
        internalType: "struct AsksDataStorage.FullAsk",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "feature",
        type: "uint32",
      },
    ],
    name: "hasFeature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "newAsk",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610902806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636e6ba916116100505780636e6ba91614610188578063a1d1cbe0146101a8578063c58519b21461022157600080fd5b8063418f06561461006c5780634a400aa61461010c575b600080fd5b6100d161007a3660046106c4565b60006020818152928152604080822090935290815220805460019091015473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900463ffffffff1683565b6040805193845273ffffffffffffffffffffffffffffffffffffffff909216602084015263ffffffff16908201526060015b60405180910390f35b61018661011a3660046106c4565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152602081815260408083209383529290522060018101805467058d15e1762800009092557fffffffffffffffff000000000000000000000000000000000000000000000000909116610111179055565b005b61019b6101963660046106c4565b610230565b60405161010391906106ee565b6102116101b6366004610834565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152602081815260408083209383529290522060010154740100000000000000000000000000000000000000009004811663ffffffff90811691161490565b6040519015158152602001610103565b60405160008152602001610103565b61029a604080516101208101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290528351808501855282815280820183905260e084015283518085019094528184528301529061010082015290565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020818152604080832085845290915290206102d1906102d8565b9392505050565b610342604080516101208101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290528351808501855282815280820183905260e084015283518085019094528184528301529061010082015290565b600182015474010000000000000000000000000000000000000000900463ffffffff166103cf604080516101208101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290528351808501855282815280820183905260e084015283518085019094528184528301529061010082015290565b6103d884610599565b73ffffffffffffffffffffffffffffffffffffffff1660a08201526103fc846105e2565b73ffffffffffffffffffffffffffffffffffffffff1660c0820152604080831614156104315761042b8461062e565b60e08201525b6008808316141561049357604080518082018252600080825260209182018190526008815260028701825282902054825180840190935261ffff8116835260101c73ffffffffffffffffffffffffffffffffffffffff16908201526101008201525b601080831614156104bb576010600090815260028501602052604090205461ffff1660808201525b602080831614156104eb576104cf84610599565b73ffffffffffffffffffffffffffffffffffffffff1660a08201525b6080808316141561053d5760806000908152600285016020526040902054606081901c73ffffffffffffffffffffffffffffffffffffffff1660608301526bffffffffffffffffffffffff1660408201525b610100808316141561056e57610552846105e2565b73ffffffffffffffffffffffffffffffffffffffff1660c08201525b600184015473ffffffffffffffffffffffffffffffffffffffff166020820152925483525090919050565b60018101546000906020740100000000000000000000000000000000000000009091048116146105cb57506000919050565b506020600081815260029092019052604090205490565b60018101546000906101007401000000000000000000000000000000000000000090910481161461061557506000919050565b5061010060009081526002909101602052604090205490565b6040805180820190915260008082526020820152604060008181526002840160208190528282205473ffffffffffffffffffffffffffffffffffffffff1684529161067a90600161087d565b63ffffffff1681526020808201929092526040016000205490820152919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106bf57600080fd5b919050565b600080604083850312156106d757600080fd5b6106e08361069b565b946020939093013593505050565b6000610160820190508251825273ffffffffffffffffffffffffffffffffffffffff6020840151166020830152604083015161073a60408401826bffffffffffffffffffffffff169052565b506060830151610762606084018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151610778608084018261ffff169052565b5060a08301516107a060a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c08301516107c860c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e08301516107fb60e0840182805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b506101009290920151805161ffff166101208301526020015173ffffffffffffffffffffffffffffffffffffffff166101409091015290565b60008060006060848603121561084957600080fd5b6108528461069b565b925060208401359150604084013563ffffffff8116811461087257600080fd5b809150509250925092565b600063ffffffff8083168185168083038211156108c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b0194935050505056fea2646970667358221220936816051a5e53fd5cb63d0108451d5bbdc1714c7a6febfdd6c8df444834cbdf64736f6c634300080a0033";

type StorageTestBaseMinimalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageTestBaseMinimalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageTestBaseMinimal__factory extends ContractFactory {
  constructor(...args: StorageTestBaseMinimalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StorageTestBaseMinimal> {
    return super.deploy(overrides || {}) as Promise<StorageTestBaseMinimal>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StorageTestBaseMinimal {
    return super.attach(address) as StorageTestBaseMinimal;
  }
  override connect(signer: Signer): StorageTestBaseMinimal__factory {
    return super.connect(signer) as StorageTestBaseMinimal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageTestBaseMinimalInterface {
    return new utils.Interface(_abi) as StorageTestBaseMinimalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StorageTestBaseMinimal {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StorageTestBaseMinimal;
  }
}
