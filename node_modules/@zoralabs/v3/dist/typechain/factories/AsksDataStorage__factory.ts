/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AsksDataStorage,
  AsksDataStorageInterface,
} from "../AsksDataStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "askForNFT",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "features",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061014a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063418f065614610030575b600080fd5b61009561003e3660046100cf565b60006020818152928152604080822090935290815220805460019091015473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900463ffffffff1683565b6040805193845273ffffffffffffffffffffffffffffffffffffffff909216602084015263ffffffff169082015260600160405180910390f35b600080604083850312156100e257600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461010657600080fd5b94602093909301359350505056fea26469706673582212205ecf95c758193b1e0529e9e1e66284ece72c7b6d31ecdca98de0405334fa42e864736f6c634300080a0033";

type AsksDataStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsksDataStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsksDataStorage__factory extends ContractFactory {
  constructor(...args: AsksDataStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AsksDataStorage> {
    return super.deploy(overrides || {}) as Promise<AsksDataStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AsksDataStorage {
    return super.attach(address) as AsksDataStorage;
  }
  override connect(signer: Signer): AsksDataStorage__factory {
    return super.connect(signer) as AsksDataStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsksDataStorageInterface {
    return new utils.Interface(_abi) as AsksDataStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AsksDataStorage {
    return new Contract(address, _abi, signerOrProvider) as AsksDataStorage;
  }
}
