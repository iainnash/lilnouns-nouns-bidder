/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  IncomingTransferSupportV1,
  IncomingTransferSupportV1Interface,
} from "../IncomingTransferSupportV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20TransferHelper",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "erc20TransferHelper",
    outputs: [
      {
        internalType: "contract ERC20TransferHelper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161013a38038061013a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805160b261008860003960006031015260b26000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638f9d325114602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea26469706673582212201e48497bc04dec05f57d6341058000f9e798b4df9f7a0a2f6541f64d249a03e364736f6c634300080a0033";

type IncomingTransferSupportV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IncomingTransferSupportV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IncomingTransferSupportV1__factory extends ContractFactory {
  constructor(...args: IncomingTransferSupportV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _erc20TransferHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IncomingTransferSupportV1> {
    return super.deploy(
      _erc20TransferHelper,
      overrides || {}
    ) as Promise<IncomingTransferSupportV1>;
  }
  override getDeployTransaction(
    _erc20TransferHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_erc20TransferHelper, overrides || {});
  }
  override attach(address: string): IncomingTransferSupportV1 {
    return super.attach(address) as IncomingTransferSupportV1;
  }
  override connect(signer: Signer): IncomingTransferSupportV1__factory {
    return super.connect(signer) as IncomingTransferSupportV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IncomingTransferSupportV1Interface {
    return new utils.Interface(_abi) as IncomingTransferSupportV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IncomingTransferSupportV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IncomingTransferSupportV1;
  }
}
