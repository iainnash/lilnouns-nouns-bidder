/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  OutgoingTransferSupportV1,
  OutgoingTransferSupportV1Interface,
} from "../OutgoingTransferSupportV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wethAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5060405160bc38038060bc833981016040819052602a91603a565b6001600160a01b03166080526068565b600060208284031215604b57600080fd5b81516001600160a01b0381168114606157600080fd5b9392505050565b608051603f607d60003960005050603f6000f3fe6080604052600080fdfea2646970667358221220e56983df64d217598c110a8b0ae6872ae86259ee2634e6d48a5996c8dc1f4b8c64736f6c634300080a0033";

type OutgoingTransferSupportV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OutgoingTransferSupportV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OutgoingTransferSupportV1__factory extends ContractFactory {
  constructor(...args: OutgoingTransferSupportV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wethAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OutgoingTransferSupportV1> {
    return super.deploy(
      _wethAddress,
      overrides || {}
    ) as Promise<OutgoingTransferSupportV1>;
  }
  override getDeployTransaction(
    _wethAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wethAddress, overrides || {});
  }
  override attach(address: string): OutgoingTransferSupportV1 {
    return super.attach(address) as OutgoingTransferSupportV1;
  }
  override connect(signer: Signer): OutgoingTransferSupportV1__factory {
    return super.connect(signer) as OutgoingTransferSupportV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OutgoingTransferSupportV1Interface {
    return new utils.Interface(_abi) as OutgoingTransferSupportV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OutgoingTransferSupportV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OutgoingTransferSupportV1;
  }
}
